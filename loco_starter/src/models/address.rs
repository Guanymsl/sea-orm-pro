//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize)]
#[sea_orm(table_name = "address")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub address_id: i32,
    pub address_line1: String,
    pub address_line2: Option<String>,
    pub city: String,
    pub state_province: String,
    pub country_region: String,
    pub postal_code: String,
    #[sea_orm(unique)]
    pub rowguid: Uuid,
    #[serde(deserialize_with = "super::utils::date_time_from_str")]
    pub created_date: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::customer_address::Entity")]
    CustomerAddress,
}

impl Related<super::customer_address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CustomerAddress.def()
    }
}

impl Related<super::customer::Entity> for Entity {
    fn to() -> RelationDef {
        super::customer_address::Relation::Customer.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::customer_address::Relation::Address.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::customer_address::Entity")]
    CustomerAddress,
    #[sea_orm(entity = "super::customer::Entity")]
    Customer,
}
