//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize)]
#[sea_orm(table_name = "sales_order_header")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub sales_order_id: i32,
    pub revision_number: i32,
    #[serde(deserialize_with = "super::utils::date_time_from_str")]
    pub order_date: DateTime,
    #[serde(deserialize_with = "super::utils::date_time_from_str")]
    pub due_date: DateTime,
    #[serde(deserialize_with = "super::utils::opt_date_time_from_str")]
    pub ship_date: Option<DateTime>,
    pub status: i32,
    #[serde(deserialize_with = "super::utils::bool_from_int")]
    pub online_order_flag: bool,
    // #[sea_orm(unique)]
    // pub sales_order_number: String,
    pub purchase_order_number: Option<String>,
    pub account_number: Option<String>,
    pub customer_id: i32,
    pub ship_to_address_id: Option<i32>,
    pub bill_to_address_id: Option<i32>,
    pub ship_method: String,
    pub credit_card_approval_code: Option<String>,
    pub sub_total: f64,
    pub tax_amt: f64,
    pub freight: f64,
    // pub total_due: f64,
    pub comment: Option<String>,
    #[sea_orm(unique)]
    pub rowguid: Uuid,
    #[serde(deserialize_with = "super::utils::date_time_from_str")]
    pub created_date: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::address::Entity",
        from = "Column::BillToAddressId",
        to = "super::address::Column::AddressId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Address2,
    #[sea_orm(
        belongs_to = "super::address::Entity",
        from = "Column::ShipToAddressId",
        to = "super::address::Column::AddressId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Address1,
    #[sea_orm(
        belongs_to = "super::customer::Entity",
        from = "Column::CustomerId",
        to = "super::customer::Column::CustomerId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Customer,
    #[sea_orm(has_many = "super::sales_order_detail::Entity")]
    SalesOrderDetail,
}

impl Related<super::customer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customer.def()
    }
}

impl Related<super::sales_order_detail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SalesOrderDetail.def()
    }
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        super::sales_order_detail::Relation::Product.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::sales_order_detail::Relation::SalesOrderHeader
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::address::Entity", def = "Relation::Address2.def()")]
    Address2,
    #[sea_orm(entity = "super::address::Entity", def = "Relation::Address1.def()")]
    Address1,
    #[sea_orm(entity = "super::customer::Entity")]
    Customer,
    #[sea_orm(entity = "super::sales_order_detail::Entity")]
    SalesOrderDetail,
    #[sea_orm(entity = "super::product::Entity")]
    Product,
}
